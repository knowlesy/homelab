---
- name: System Updates and Patching
  hosts: all
  gather_facts: true
  become: yes
  vars_files:
    - secrets.yml
  vars:
    reboot_timeout: 600
    reboot_delay: 30
  
  tasks:
    - name: Update package cache (Ubuntu/Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      tags: update_cache
    
    - name: Check for available updates before patching
      shell: apt list --upgradable 2>/dev/null | grep -v "WARNING" | wc -l
      register: updates_available
      when: ansible_os_family == "Debian"
      changed_when: false
      tags: check_updates
    
    - name: Display available updates count
      debug:
        msg: "{{ inventory_hostname }}: {{ updates_available.stdout }} updates available"
      when: ansible_os_family == "Debian"
      tags: check_updates
    
    - name: Upgrade all packages (Ubuntu/Debian)
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
        autoremove: yes
        autoclean: yes
      register: apt_upgrade_result
      when: ansible_os_family == "Debian"
      tags: upgrade_packages
    
    - name: Install security updates only (alternative safer approach)
      shell: |
        unattended-upgrade -d
      register: security_updates
      when: 
        - ansible_os_family == "Debian"
        - security_only is defined and security_only
      changed_when: "'No packages found that can be upgraded unattended' not in security_updates.stdout"
      tags: security_updates
    
    - name: Clean package cache
      apt:
        autoclean: yes
        autoremove: yes
      when: ansible_os_family == "Debian"
      tags: cleanup
    
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      tags: check_reboot
    
    - name: Display reboot requirement status
      debug:
        msg: "{{ inventory_hostname }}: {{ 'Reboot required' if reboot_required_file.stat.exists else 'No reboot required' }}"
      tags: check_reboot
    
    - name: Check for running kernel vs installed kernel
      shell: |
        CURRENT_KERNEL=$(uname -r)
        LATEST_KERNEL=$(dpkg -l | grep linux-image | grep -v generic | tail -1 | awk '{print $2}' | sed 's/linux-image-//')
        if [ "$CURRENT_KERNEL" != "$LATEST_KERNEL" ]; then
          echo "kernel_mismatch"
        else
          echo "kernel_current"
        fi
      register: kernel_check
      changed_when: false
      when: ansible_os_family == "Debian"
      tags: check_kernel
    
    - name: Display kernel status
      debug:
        msg: "{{ inventory_hostname }}: {{ 'Kernel update requires reboot' if kernel_check.stdout == 'kernel_mismatch' else 'Kernel is current' }}"
      when: ansible_os_family == "Debian"
      tags: check_kernel
    
    - name: Update GRUB if kernel was updated
      command: update-grub
      when: 
        - ansible_os_family == "Debian"
        - kernel_check.stdout == "kernel_mismatch"
      tags: update_grub
    
    - name: Reboot nodes if required (when auto_reboot is enabled)
      reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        pre_reboot_delay: "{{ reboot_delay }}"
        msg: "Rebooting for system updates"
        test_command: uptime
      when: 
        - reboot_required_file.stat.exists or (kernel_check.stdout == "kernel_mismatch" if kernel_check is defined else false)
        - auto_reboot is defined and auto_reboot
      tags: reboot
    
    - name: Wait for system to become available after reboot
      wait_for_connection:
        delay: 30
        timeout: 300
      when: 
        - reboot_required_file.stat.exists or (kernel_check.stdout == "kernel_mismatch" if kernel_check is defined else false)
        - auto_reboot is defined and auto_reboot
      tags: reboot
    
    - name: Verify system is responsive after updates
      command: uptime
      register: post_update_uptime
      changed_when: false
      tags: verify
    
    - name: Display post-update system status
      debug:
        msg: "{{ inventory_hostname }} - Post-update status: {{ post_update_uptime.stdout }}"
      tags: verify
    
    - name: Check for remaining updates after patching
      shell: apt list --upgradable 2>/dev/null | grep -v "WARNING" | wc -l
      register: remaining_updates
      when: ansible_os_family == "Debian"
      changed_when: false
      tags: final_check
    
    - name: Display final update status
      debug:
        msg: "{{ inventory_hostname }}: {{ remaining_updates.stdout }} updates remaining after patching"
      when: ansible_os_family == "Debian"
      tags: final_check
    
    - name: Create update log entry
      lineinfile:
        path: /var/log/ansible-updates.log
        line: "{{ ansible_date_time.iso8601 }}: System updated via Ansible - {{ apt_upgrade_result.changed | default('no changes') }}"
        create: yes
        mode: '0644'
      tags: logging
    
    - name: Summary report
      debug:
        msg: |
          Update Summary for {{ inventory_hostname }}:
          - Updates applied: {{ 'Yes' if apt_upgrade_result.changed else 'No' }}
          - Reboot required: {{ 'Yes' if reboot_required_file.stat.exists else 'No' }}
          - Kernel updated: {{ 'Yes' if kernel_check.stdout == 'kernel_mismatch' else 'No' if kernel_check is defined else 'Unknown' }}
          - Remaining updates: {{ remaining_updates.stdout if remaining_updates is defined else 'Unknown' }}
      tags: summary
